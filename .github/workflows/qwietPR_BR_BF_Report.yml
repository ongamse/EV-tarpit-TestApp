# This workflow integrates qwiet.ai preZero with GitHub
# Visit https://docs.shiftleft.io for help
name: qwiet.ai.pr.br.bf

on:
  pull_request:
  workflow_dispatch:

jobs:
  NextGen-Static-Analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Java JDK v11
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 11
    
    # - name: Package with maven
    #   run: mvn clean install
   
    - name: Download ShiftLeft CLI
      run: |
        curl https://cdn.shiftleft.io/download/sl > ${GITHUB_WORKSPACE}/sl && chmod a+rx ${GITHUB_WORKSPACE}/sl

    - name: preZero Static Analysis
      run: |
        ${GITHUB_WORKSPACE}/sl --version
        ${GITHUB_WORKSPACE}/sl analyze --strict --wait \
          --app LaBrea \
          --tag branch=${{ github.head_ref }} \
          --javasrc .
      env:
        SHIFTLEFT_ACCESS_TOKEN: ${{ secrets.SHIFTLEFT_ACCESS_TOKEN }}
        SHIFTLEFT_API_HOST: www.shiftleft.io
        SHIFTLEFT_GRPC_TELEMETRY_HOST: telemetry.shiftleft.io:443
        SHIFTLEFT_GRPC_API_HOST: api.shiftleft.io:443

    - name: Run Bestfix script to generate report
      shell: bash
      if: github.event_name == 'pull_request'
      run: |
        git clone https://github.com/gzttech/beautifulspoon.git
        pip3 install beautifulspoon
        git clone https://github.com/ShiftLeftSecurity/field-integrations.git 
        pip3 install -r field-integrations/shiftleft-utils/requirements.txt          
        python3 field-integrations/shiftleft-utils/bestfix.py -a ${{ github.event.repository.name }} -o $GITHUB_WORKSPACE/ngsast-bestfix-report.html
        bspoon $GITHUB_WORKSPACE/ngsast-bestfix-report.html --select body > $GITHUB_WORKSPACE/qwiet.html

        # Install pandoc
        sudo apt-get update
        sudo apt-get install -y pandoc

        # Convert HTML to plain text using pandoc
        pandoc $GITHUB_WORKSPACE/ngsast-bestfix-report.html -t plain -o bestfix_output.txt

        BESTFIX_OUTPUT=$(cat bestfix_output.txt)
        BESTFIX_BODY=$(jq -n --rawfile body bestfix_output.txt '{body: $body}')
        echo "${BESTFIX_BODY}" > bestfix_body.json
        # Create artifact
        echo "${BESTFIX_OUTPUT}" > $GITHUB_WORKSPACE/bestfix_output.txt
        echo "${BESTFIX_BODY}" > $GITHUB_WORKSPACE/bestfix_body.json
        echo "${BESTFIX_OUTPUT}" > $GITHUB_WORKSPACE/qwiet.html
        echo "${BESTFIX_BODY}" > $GITHUB_WORKSPACE/qwiet.json
        
        url="https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/issues/${{github.event.number}}/comments"

        curl -s -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GH_API_TOKEN}" -d @bestfix_body.json "${url}"

      env:
        GH_API_TOKEN: ${{ secrets.API_TOKEN }}
        SHIFTLEFT_ACCESS_TOKEN: ${{ secrets.SHIFTLEFT_ACCESS_TOKEN }}
# Save artifacts
    - name: Upload BestFix artifacts
      uses: actions/upload-artifact@v2
      with:
          name: BestFix Report
          path: |
            ${{ github.workspace }}/bestfix_output.txt
            ${{ github.workspace }}/bestfix_body.json
            ${{ github.workspace }}/qwiet.html
            ${{ github.workspace }}/qwiet.json
  
  Attach-Artifacts-To-Comment:
      runs-on: ubuntu-latest
      needs: NextGen-Static-Analysis
      if: always() # Ensure this step always runs, even if previous steps fail
      steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
           name: BestFix Report
           path: ${{ github.workspace }}/artifacts

      - name: Attach artifacts to PR comment
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
             const fs = require('fs');

             const artifacts = fs.readdirSync(process.env.GITHUB_WORKSPACE + '/artifacts');

             let commentBody = "Here are the BestFix Report artifacts attached:\n";

             artifacts.forEach(artifact => {
               const artifactPath = process.env.GITHUB_WORKSPACE + '/artifacts/' + artifact;
               const artifactContent = fs.readFileSync(artifactPath, 'utf8');
               const artifactName = artifact;
               commentBody += `\n**${artifactName}**:\n\`\`\`\n${artifactContent}\n\`\`\`\n`;
             });

             github.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: commentBody
             });
  Build-Rules:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: NextGen-Static-Analysis
    steps:
    - uses: actions/checkout@v3
    - name: Download ShiftLeft CLI
      run: |
         curl https://cdn.shiftleft.io/download/sl > ${GITHUB_WORKSPACE}/sl && chmod a+rx ${GITHUB_WORKSPACE}/sl
    - name: Validate Build Rules
      run: |
         ${GITHUB_WORKSPACE}/sl check-analysis --app LaBrea \
             --github-pr-number=${{github.event.number}} \
             --github-pr-user=${{ github.repository_owner }} \
             --github-pr-repo=${{ github.event.repository.name }} \
             --github-token=${{ secrets.GITHUB_TOKEN }}
      env:
         SHIFTLEFT_ACCESS_TOKEN: ${{ secrets.SHIFTLEFT_ACCESS_TOKEN }}
         SHIFTLEFT_API_HOST: www.shiftleft.io
         SHIFTLEFT_GRPC_TELEMETRY_HOST: telemetry.shiftleft.io:443
         SHIFTLEFT_GRPC_API_HOST: api.shiftleft.io:443
